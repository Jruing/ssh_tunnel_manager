name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.25.0'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test ./... -v

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          # Windows builds
          - goos: windows
            goarch: amd64
            suffix: .exe
          - goos: windows
            goarch: arm64
            suffix: .exe
          - goos: windows
            goarch: 386
            suffix: .exe

          # Linux builds
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: linux
            goarch: arm
            suffix: ""
          - goos: linux
            goarch: 386
            suffix: ""

          # macOS builds
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""

          # FreeBSD builds
          - goos: freebsd
            goarch: amd64
            suffix: ""
          - goos: freebsd
            goarch: arm64
            suffix: ""

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=dev-$(echo $GITHUB_SHA | cut -c1-8)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="ssh-tunnel-manager-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}"
        echo "Building $BINARY_NAME"
        go build -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" -o "$BINARY_NAME" .

        # Create checksum
        if command -v sha256sum >/dev/null 2>&1; then
          sha256sum "$BINARY_NAME" > "$BINARY_NAME.sha256"
        else
          shasum -a 256 "$BINARY_NAME" > "$BINARY_NAME.sha256"
        fi

        # Create info file
        cat > "$BINARY_NAME.info" << EOF
        Build Information:
        - Version: ${{ steps.version.outputs.version }}
        - OS: ${{ matrix.goos }}
        - Architecture: ${{ matrix.goarch }}
        - Go Version: ${{ env.GO_VERSION }}
        - Build Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Commit: ${{ github.sha }}
        - AI Generated: This binary was built from code entirely generated by Claude AI
        EOF

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ssh-tunnel-manager-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          ssh-tunnel-manager-*
          !ssh-tunnel-manager-*.info
        retention-days: 7

    - name: Upload build info
      uses: actions/upload-artifact@v3
      with:
        name: build-info-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          *.info
          *.sha256
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Organize artifacts
      run: |
        mkdir -p release
        find artifacts -name "ssh-tunnel-manager-*" -type f | while read file; do
          cp "$file" release/
        done

        # Create combined checksums file
        cd release
        find . -name "*.sha256" -exec cat {} \; > SHA256SUMS

        # List all files
        ls -la

    - name: Get release info
      id: release_info
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        # Extract version notes if they exist
        if [ -f "CHANGELOG.md" ]; then
          NOTES=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
        else
          NOTES="Release $VERSION

## What's New
- Automated release with multi-platform binaries
- Support for Windows, Linux, macOS, and FreeBSD
- Multiple architectures: amd64, arm64, arm, 386

## AI Generated Code
This release contains code entirely generated by Claude AI, showcasing advanced AI capabilities in software development.

## Supported Platforms
- **Windows**: amd64, arm64, 386
- **Linux**: amd64, arm64, arm, 386
- **macOS**: amd64 (Intel), arm64 (Apple Silicon)
- **FreeBSD**: amd64, arm64

## Installation
1. Download the appropriate binary for your platform
2. Extract and run: \`./ssh-tunnel-manager\`
3. Enjoy efficient SSH tunnel management!

For detailed usage instructions, see README.md and README_CN.md."
        fi

        # Save notes to file for multiline output
        echo "$NOTES" > release_notes.txt

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_info.outputs.version }}
        name: SSH Tunnel Manager ${{ steps.release_info.outputs.version }}
        body_path: release_notes.txt
        draft: false
        prerelease: false
        files: |
          release/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update latest release info
      run: |
        echo "âœ… Release ${{ steps.release_info.outputs.version }} created successfully!"
        echo "ðŸ“¦ Binaries available for multiple platforms and architectures"
        echo "ðŸ¤– All code generated by Claude AI"
        echo "ðŸ”— Download from: https://github.com/${{ github.repository }}/releases/latest"

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get version for Docker
      id: docker_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=latest
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        tags: |
          ssh-tunnel-manager:${{ steps.docker_version.outputs.version }}
          ssh-tunnel-manager:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.docker_version.outputs.version }}
          BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT=${{ github.sha }}