package main

import (
	"flag"
	"fmt"
	"log"
	"os"

	tea "github.com/charmbracelet/bubbletea"
)

// Version information (set by build flags)
var (
	Version   = "dev"
	BuildTime = "unknown"
	Commit    = "unknown"
)

func main() {
	// Command line flags
	var (
		showVersion = flag.Bool("version", false, "Show version information")
		showHelp    = flag.Bool("help", false, "Show help information")
	)
	flag.Parse()

	// Handle version flag
	if *showVersion {
		fmt.Printf("SSH Tunnel Manager %s\n", Version)
		fmt.Printf("Build Time: %s\n", BuildTime)
		fmt.Printf("Commit: %s\n", Commit)
		fmt.Printf("AI Generated: This application was entirely generated by Claude AI\n")
		return
	}

	// Handle help flag
	if *showHelp {
		fmt.Println("SSH隧道管理器 / SSH Tunnel Manager")
		fmt.Println("一个功能完善的SSH隧道管理工具，支持本地、远程和动态端口转发")
		fmt.Println("A comprehensive SSH tunnel management tool with local, remote, and dynamic port forwarding")
		fmt.Println()
		fmt.Println("Usage:")
		fmt.Println("  ssh-tunnel-manager [options]")
		fmt.Println()
		fmt.Println("Options:")
		fmt.Println("  -version    Show version information")
		fmt.Println("  -help       Show this help message")
		fmt.Println()
		fmt.Println("Controls:")
		fmt.Println("  ↑/↓ 导航 • 回车/空格 详情 • s 启动/停止 • a 添加 • e 编辑 • d 删除 • q 退出")
		fmt.Println("  ↑/↓ navigate • Enter/Space details • s start/stop • a add • e edit • d delete • q quit")
		fmt.Println()
		fmt.Println("AI Generated: This code was entirely generated by Claude AI")
		fmt.Println("For detailed documentation, see README.md and README_CN.md")
		return
	}

	// Initialize the model
	m, err := initialModel()
	if err != nil {
		log.Fatalf("Failed to initialize application: %v", err)
	}

	// Create a new Bubble Tea program
	p := tea.NewProgram(m, tea.WithAltScreen())

	// Run the program
	if _, err := p.Run(); err != nil {
		fmt.Printf("Error running program: %v\n", err)
		os.Exit(1)
	}
}
